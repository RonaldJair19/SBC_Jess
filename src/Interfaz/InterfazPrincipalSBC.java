/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;
import java.awt.TextArea;
import java.io.Writer;
import jess.JessException;
import sbc_mecanico.ControlMotor;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import jess.awt.TextAreaWriter;
import jess.swing.JTextAreaWriter;
import jess.awt. *;


/**
 *
 * @author samu9
 */
public class InterfazPrincipalSBC extends javax.swing.JFrame {
    char [] Vector_respuestas = new char[8];
    int Con = 0;
    private ControlMotor motor_control;
    ControlMotor control_motor = new ControlMotor();
    /**
     * Creates new form InterfazPrincipalSBC
     */
    public InterfazPrincipalSBC() {
        initComponents();
        Btn_Siguiente.setEnabled(false);
        Btn_Reiniciar.setEnabled(false);
        GBtn_Principal.add(R_Btn_A);
        GBtn_Principal.add(R_Btn_B);
        GBtn_Principal.add(R_Btn_C);
        GBtn_Principal.add(R_Btn_D);
        R_Btn_A.setEnabled(false);
        R_Btn_B.setEnabled(false);
        R_Btn_C.setEnabled(false);
        R_Btn_D.setEnabled(false);
        Btn_Atras.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GBtn_Principal = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Btn_Siguiente = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Preguntas_Mostrar = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        R_Btn_A = new javax.swing.JRadioButton();
        R_Btn_B = new javax.swing.JRadioButton();
        R_Btn_C = new javax.swing.JRadioButton();
        R_Btn_D = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Btn_Atras = new javax.swing.JButton();
        Btn_Reiniciar = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(54, 11, 16));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Sistema Experto");

        jLabel2.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Mecánico");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/v-motor.png"))); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/mecanico (2).png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addGap(77, 77, 77))
        );

        jButton1.setText("Salir");

        jPanel3.setBackground(new java.awt.Color(29, 0, 0));

        Btn_Siguiente.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Btn_Siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/proximo.png"))); // NOI18N
        Btn_Siguiente.setText("Siguiente");
        Btn_Siguiente.setActionCommand("Btn_siguiente");
        Btn_Siguiente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_SiguienteMouseClicked(evt);
            }
        });
        Btn_Siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_SiguienteActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Preguntas");

        Preguntas_Mostrar.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        Preguntas_Mostrar.setForeground(new java.awt.Color(255, 255, 255));
        Preguntas_Mostrar.setText("Aquí se mostrarán las preguntas del SBC.");

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/manual.png"))); // NOI18N
        jButton3.setText("Mostrar inferencia");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        R_Btn_A.setBackground(new java.awt.Color(102, 102, 102));
        R_Btn_A.setFont(new java.awt.Font("Cooper Black", 0, 24)); // NOI18N
        R_Btn_A.setForeground(new java.awt.Color(255, 255, 255));
        R_Btn_A.setText("A");

        R_Btn_B.setBackground(new java.awt.Color(102, 102, 102));
        R_Btn_B.setFont(new java.awt.Font("Cooper Black", 0, 24)); // NOI18N
        R_Btn_B.setForeground(new java.awt.Color(255, 255, 255));
        R_Btn_B.setText("B");
        R_Btn_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R_Btn_BActionPerformed(evt);
            }
        });

        R_Btn_C.setBackground(new java.awt.Color(102, 102, 102));
        R_Btn_C.setFont(new java.awt.Font("Cooper Black", 0, 24)); // NOI18N
        R_Btn_C.setForeground(new java.awt.Color(255, 255, 255));
        R_Btn_C.setText("C");
        R_Btn_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R_Btn_CActionPerformed(evt);
            }
        });

        R_Btn_D.setBackground(new java.awt.Color(102, 102, 102));
        R_Btn_D.setFont(new java.awt.Font("Cooper Black", 0, 24)); // NOI18N
        R_Btn_D.setForeground(new java.awt.Color(255, 255, 255));
        R_Btn_D.setText("D");
        R_Btn_D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                R_Btn_DActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Respuesta");

        Btn_Atras.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Btn_Atras.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interfaz/rebobinar.png"))); // NOI18N
        Btn_Atras.setText("Atras");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(R_Btn_A, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(R_Btn_C, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(R_Btn_B, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Btn_Siguiente)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(R_Btn_D, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Btn_Atras)
                                .addGap(32, 32, 32)))
                        .addComponent(jButton3)
                        .addGap(14, 14, 14))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(48, 48, 48))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(Preguntas_Mostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(249, 249, 249))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Preguntas_Mostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(R_Btn_A)
                            .addComponent(R_Btn_B)
                            .addComponent(Btn_Siguiente))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(R_Btn_D)
                            .addComponent(R_Btn_C)
                            .addComponent(Btn_Atras))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(46, 46, 46)))
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        Btn_Reiniciar.setText("Reiniciar");
        Btn_Reiniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_ReiniciarMouseClicked(evt);
            }
        });
        Btn_Reiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ReiniciarActionPerformed(evt);
            }
        });

        jButton5.setText("Iniciar SBC");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jButton5)
                .addGap(165, 165, 165)
                .addComponent(Btn_Reiniciar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(30, 30, 30))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(Btn_Reiniciar)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 625, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 693, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    
    private void Btn_SiguienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_SiguienteMouseClicked
        /*if(A == "A"){
        this.control_motor.F_Insertar("(assert (fallo-carro(fallo_carro A)))");
        }*/
        if (R_Btn_A.isSelected()) {
            Vector_respuestas[Con] = 'A';
        } else if(R_Btn_B.isSelected()){
            Vector_respuestas[Con] = 'B';
        }else if(R_Btn_C.isSelected()){
            Vector_respuestas[Con] = 'C';
        }
        else if(R_Btn_D.isSelected()){
            Vector_respuestas[Con] = 'D';
        }
        //this.pack();
        Con = Con + 1;
        GBtn_Principal.clearSelection();
        Vector_de_respuestas(Vector_respuestas);
    }//GEN-LAST:event_Btn_SiguienteMouseClicked
    
    private void Vector_de_respuestas(char[] Vector){
       
        
        /*for(int i=0;i<Vector.length;i++)
    {
        
    }*/
        
        try{
           if(Vector[0] == 'A'){
            this.control_motor.F_Insertar("(assert (fallo-carro(fallo_carro A)))");
            Preguntas_Mostrar.setText("<html> -- Que tipo de motor utiliza su automovil? <p><p> (A) Motor Electrico <p> (B) Motor de combustion interna <html>");  
                if(Vector[1] == 'A'){
                    this.control_motor.F_Insertar("(assert (clase-motor(clase_motor A)))");
                    Preguntas_Mostrar.setText("<html> -- Su motor electrico hace algun ruido? <p><p> (A) Si <p> (B) No hace ningun ruido");
                    if(Vector[2] == 'A'){
                        //Aqui debe venir un reset y respuesta!
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (motor-ruido(motor_ruido A)))");  
                    }
                    else if(Vector[2] == 'B'){
                        this.control_motor.F_Insertar("(assert (motor-ruido(motor_ruido B)))");
                        Preguntas_Mostrar.setText("<html> --Seleccione si nota alguna de las siguientes situaciones en su motor <p><p> (A) El motor no arranca en vacio <p> (B) Humo o quemadura <p> (C) No noto nada <html>");
                        switch (Vector[3]) {
                            case 'A':
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert (situaciones-motor(situaciones_motor A)))");
                                break;
                            case 'B':
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert (situaciones-motor(situaciones_motor B)))");
                                break;
                            case 'C':
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert (situaciones-motor(situaciones_motor C)))");
                                break;
                            default:
                                break;
                        } 
                    }   
                }
                //Primera parte de la primera rama terminada
                //Segunda parte de la primera rama por iniciar
                else if(Vector[1] == 'B'){
                    this.control_motor.F_Insertar("(assert (clase-motor(clase_motor B)))");
                    Preguntas_Mostrar.setText("<html> -- Que clase de combustible utiliza su motor? <p><p> (A) Motor de gasolina <p> (B) Motor diesel");
                    if(Vector[2] == 'A'){
                        this.control_motor.F_Insertar("(assert (combustion-motor(combustion_del_motor A)))");
                        Preguntas_Mostrar.setText("<html> --Siente un consumo exesivo de: <p><p> (A) Aceite <p> (B) Gasolina <p> (C) No siento consumo exesivo de nada");
                        if(Vector[3] == 'A'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (consumo-excesivo(consumo_excesivo A)))");
                            }
                        else if(Vector[3] == 'B'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (consumo-excesivo(consumo_excesivo B)))");
                            }
                        else if(Vector[3] == 'C'){
                            this.control_motor.F_Insertar("(assert (consumo-excesivo(consumo_excesivo C)))");
                            Preguntas_Mostrar.setText("<html> --Siente el motor entrega toda su potencia? <p><p> (A) Si <p> (B) No");
                            if(Vector[4] == 'A'){
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert(potencia-motor(potencia_motor A)))");
                            }
                            else if(Vector[4] == 'B'){
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert(potencia-motor(potencia_motor B)))");
                            } 
                        }    
                        }
                    else if (Vector[2] == 'B'){
                        this.control_motor.F_Insertar("(assert (combustion-motor(combustion_del_motor B)))");
                        Preguntas_Mostrar.setText("<html> --Que tipo de arranque esta teniendo su motor? <p><p> (A) Arranque dificil <p> (B) Arranque duro <p> (C) Arranque sin potencia <p> (D) Arranque normal");
                        if(Vector[3] == 'A'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (tipo-arranque(tipo_arranque A)))");  
                        }
                        else if (Vector[3] == 'B'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (tipo-arranque(tipo_arranque B)))"); 
                        }
                        else if (Vector[3] == 'C'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (tipo-arranque(tipo_arranque C)))"); 
                        }
                            else if(Vector[3] == 'D'){
                                this.control_motor.F_Insertar("(assert (tipo-arranque(tipo_arranque D)))");
                                Preguntas_Mostrar.setText("<html>  Nota alguna  de estas señales? <p><p> (A) Escape con humo negro <p> (B) Ruido Significativo <p> (C) No noto nada");
                                if(Vector[4] == 'A'){
                                mostrar_respuesta();
                                this.control_motor.F_Insertar("(assert(indicios-arranque-normal(indicios_arranque_normal A)))");  
                                }
                                else if (Vector[4] == 'B'){
                                    mostrar_respuesta();
                                    this.control_motor.F_Insertar("(assert(indicios-arranque-normal(indicios_arranque_normal B)))");  
                                }
                                else if(Vector[4] == 'C'){
                                    this.control_motor.F_Insertar("(assert(indicios-arranque-normal(indicios_arranque_normal C)))");
                                    Preguntas_Mostrar.setText("<html>  --El auto ha estado detenido por mucho tiempo? <p><p> (A) Si <p> (B) No");
                                    if(Vector[5] == 'A'){
                                        mostrar_respuesta();
                                        this.control_motor.F_Insertar("(assert (auto-detenido(auto_detenido A)))");
                                    }
                                    else if (Vector[5] == 'B'){
                                        mostrar_respuesta();
                                        this.control_motor.F_Insertar("(assert (auto-detenido(auto_detenido B)))");
                                    }
                                }
                            }
                        }   
                    }
        }
         //Segunda rama sobre fallos eléctricos
        else if(Vector[0] == 'B'){
            this.control_motor.F_Insertar("(assert (fallo-carro(fallo_carro B)))");
            Preguntas_Mostrar.setText("<html> --Su automovil puede encender? <p><p> (A) Si <p>(B) No <html>");
            if(Vector[1] == 'A'){
                this.control_motor.F_Insertar("(assert (auto-encender(auto_encender A)))");
                Preguntas_Mostrar.setText("<html>--Las luces encienden con poca intensidad? <p><p> (A) Si <p>(B) No <html>");
                if(Vector[2] == 'A'){
                   this.control_motor.F_Insertar("(assert (intensidad-luces(intensidad_luces A)))");
                    Preguntas_Mostrar.setText("<html>--Su bateria es vieja? <p><p> (A) Si <p>(B) No <html>");
                    if(Vector[3] == 'A'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (bateria-vieja(bateria_vieja A)))");  
                    }
                    else if(Vector[3] == 'B'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (bateria-vieja(bateria_vieja B)))");  
                    }   
                }
                else if(Vector[2] == 'B'){
                    mostrar_respuesta();
                    this.control_motor.F_Insertar("(assert (intensidad-luces(intensidad_luces B)))");
                }    
            }
            else if(Vector[1] == 'B'){
                mostrar_respuesta();
                this.control_motor.F_Insertar("(assert (auto-encender(auto_encender B)))");  
            }   
        }
        //Tercera rama sobre los fallos en la suspension
        else if(Vector[0] == 'C'){
            this.control_motor.F_Insertar("(assert (fallo-carro(fallo_carro C)))");
            Preguntas_Mostrar.setText("<html>--Ha sentido alguna situacion extrana al conducir el auto? <p><p> (A) Si <p>(B) No <html>");
            if(Vector[1] == 'A'){
                this.control_motor.F_Insertar("(assert (situacion-conduccion-suspension(situacion_conduccion A)))");
                Preguntas_Mostrar.setText("<html>--El coche rebota demasiado? <p><p> (A) Si <p>(B) No <html>");
                if(Vector[2] == 'A'){
                    mostrar_respuesta();
                    this.control_motor.F_Insertar("(assert (carro-rebota(carro_rebota A)))"); 
                }
                else if(Vector[2] == 'B'){
                    this.control_motor.F_Insertar("(assert (carro-rebota(carro_rebota B)))");
                    Preguntas_Mostrar.setText("<html>--Cuales de las siguientes situaciones ha sentido? <p><p> (A) En curvas o apoyos fuertes actua extrano <p> (B) El coche esta desnivelado <html>");
                    if(Vector[3] == 'A'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (situaciones-suspension(situaciones_suspension A)))");
                    }
                    else if(Vector[3] == 'B'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (situaciones-suspension(situaciones_suspension B)))");
                    }
                }   
            }
            else if(Vector[1] == 'B'){
                this.control_motor.F_Insertar("(assert (situacion-conduccion-suspension(situacion_conduccion B)))");
                Preguntas_Mostrar.setText("<html>--Sus neumaticos presentan alguno de estos tipos de desgastes? <p><p> (A) Desgaste excesivo del neumatico por los extremos o el centro de la banda <p> (B) Desgaste irregular <p> (C) Ninguno<html>");
              if(Vector[2] == 'A'){
                  mostrar_respuesta();
                  this.control_motor.F_Insertar("(assert (desgaste-neumaticos(desgaste_neumaticos A)))");
              }  
              else if(Vector[2] == 'B'){
                  mostrar_respuesta();
                  this.control_motor.F_Insertar("(assert (desgaste-neumaticos(desgaste_neumaticos B)))");
              }
              else if(Vector[2] == 'C'){
                  mostrar_respuesta();
                  this.control_motor.F_Insertar("(assert (desgaste-neumaticos(desgaste_neumaticos C)))");
              } 
            }  
        }
        
        //Cuarta rama sobre los fallos en los frenos
        else if(Vector[0] == 'D'){
            this.control_motor.F_Insertar("(assert (fallo-carro(fallo_carro D)))");
            Preguntas_Mostrar.setText("<html>--Siente que el auto está frenando adecuadamente? <p><p> (A) No frena bien <p>(B) Sí está frenando bien <html>");
            if(Vector[1] == 'B'){
                mostrar_respuesta();
                this.control_motor.F_Insertar("(assert (auto-no-frena(auto_no_frena B)))");   
            }
            else if(Vector[1] == 'A'){
                this.control_motor.F_Insertar("(assert (auto-no-frena(auto_no_frena A)))"); 
                Preguntas_Mostrar.setText("<html>--Siente cambios en el pedal del freno? <p><p> (A) Sí <p>(B) No <html>");
                if(Vector[2] == 'A'){;
                    this.control_motor.F_Insertar("(assert (cambios-pedal-freno(cambios_pedal_freno A)))");
                    Preguntas_Mostrar.setText("<html>--Como es el tacto con el pedal? <p><p> (A) Esta mas duro de lo normal <p>(B) Sensacion de que esta esponjoso <p> (C) Siento un movimiento extrano del pedal<html>");
                    if(Vector[3] == 'A'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (tacto-pedal(tacto_pedal A)))");
                    }
                    else if(Vector[3] == 'B'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (tacto-pedal(tacto_pedal B)))");
                    }
                    else if(Vector[3] == 'C'){
                        this.control_motor.F_Insertar("(assert (tacto-pedal(tacto_pedal C)))");
                        Preguntas_Mostrar.setText("<html>--Cuales de los siguientes movimientos realiza el pedal? <p><p> (A) Vibra <p>(B) Pulsa <p>(C) Realiza un recorrido anormal <html>");
                        if(Vector[4] == 'A'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (movimiento-pedal(movimiento_pedal A)))"); 
                        }
                        else if(Vector[4] == 'B'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (movimiento-pedal(movimiento_pedal B)))"); 
                        }
                        else if(Vector[4] == 'C'){
                            this.control_motor.F_Insertar("(assert (movimiento-pedal(movimiento_pedal C)))"); 
                            Preguntas_Mostrar.setText("<html>--Como es el recorrido del pedal? <p><p> (A) El pedal hace un recorrido mas corto <p>(B) El recorrido del pedal se acorta <html>");
                            if(Vector[5] == 'A'){
                               mostrar_respuesta();
                               this.control_motor.F_Insertar("(assert (recorrido-pedal(recorrido_pedal A)))");     
                            }
                            else if(Vector[5] == 'B'){
                               mostrar_respuesta();
                               this.control_motor.F_Insertar("(assert (recorrido-pedal(recorrido_pedal B)))");
                            } 
                        }
                    }
                }
                else if(Vector[2] == 'B'){
                    this.control_motor.F_Insertar("(assert (cambios-pedal-freno(cambios_pedal_freno B)))");
                    Preguntas_Mostrar.setText("<html>--Escucha chirridos al frenar? <p><p> (A) Si <p>(B) No <html>");
                    if(Vector[3] == 'A'){
                        mostrar_respuesta();
                        this.control_motor.F_Insertar("(assert (chirridos-frenos(chirridos_frenos A)))");
                    }
                    else if(Vector[3] == 'B'){
                        this.control_motor.F_Insertar("(assert (chirridos-frenos(chirridos_frenos B)))");
                        Preguntas_Mostrar.setText("<html>--Cuanto kilometraje tiene desde que cambio de frenos? <p><p> (A) Hace menos de 5000 KM <p>(B) Entre 5000 y 10000 KM <html>");
                        if(Vector[4] == 'A'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (kilometraje-frenos(kilometraje_frenos A)))");
                        }
                        else if(Vector[4] == 'B'){
                            mostrar_respuesta();
                            this.control_motor.F_Insertar("(assert (kilometraje-frenos(kilometraje_frenos B)))");
                        }  
                    }   
                } 
            }
        }
        } catch (JessException ex) {
            Logger.getLogger(InterfazPrincipalSBC.class.getName()).log(Level.SEVERE, null, ex);
        }     
    }
    
    public void mostrar_respuesta(){
        TextArea ta = new TextArea (20, 80);
        ta.setBounds(1,1,587,100);
        TextAreaWriter taw = new TextAreaWriter (ta);
        control_motor.r.addOutputRouter("t", taw);
        control_motor.r.addOutputRouter("WSTDOUT", taw);
        control_motor.r.addOutputRouter("WSTDERR", taw);
        jPanel4.add(ta);
        Btn_Siguiente.setEnabled(false);
        
    }
    
    public void Fin_Rama(){
        jPanel4.removeAll();
        control_motor.F_Reiniciar();
        for(int i=0;i<Vector_respuestas.length;i++)
        {
        Vector_respuestas[i]= ' ';
         }
        Con = 0;
        GBtn_Principal.clearSelection();
        //Btn_Reiniciar.setEnabled(false);
    }

    
   
    
    private void R_Btn_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R_Btn_BActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_R_Btn_BActionPerformed

    private void R_Btn_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R_Btn_CActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_R_Btn_CActionPerformed

    private void R_Btn_DActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_R_Btn_DActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_R_Btn_DActionPerformed

    private void Btn_ReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ReiniciarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Btn_ReiniciarActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked

    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Método para cuando se presione iniciar el SBC
        Btn_Siguiente.setEnabled(true);
        Preguntas_Mostrar.setText("<html> --Que tipo de falla presenta su vehiculo? <p><p> (A) Fallo del motor <p> (B) Fallo electrico <p> (C) Fallo en la suspension <p>(D) Fallo en los frenos<html>");
        R_Btn_A.setEnabled(true);
        R_Btn_B.setEnabled(true);
        R_Btn_C.setEnabled(true);
        R_Btn_D.setEnabled(true);
        jButton5.setEnabled(false);
        Btn_Reiniciar.setEnabled(true);
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void Btn_SiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_SiguienteActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_Btn_SiguienteActionPerformed

    private void Btn_ReiniciarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_ReiniciarMouseClicked
        Btn_Siguiente.setEnabled(true);
        Btn_Reiniciar.setEnabled(true);
        Preguntas_Mostrar.setText("<html> --Que tipo de falla presenta su vehiculo? <p><p> (A) Fallo del motor <p> (B) Fallo electrico <p> (C) Fallo en la suspension <p>(D) Fallo en los frenos<html>");
        Fin_Rama();  
    }//GEN-LAST:event_Btn_ReiniciarMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        try {
            this.motor_control.r.executeCommand("(facts)");
            this.motor_control.r.run();

        } catch (JessException ex) {
            Logger.getLogger(InterfazPrincipalSBC.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3MouseClicked
    
    
    public void setControlMotor(ControlMotor motor_control){
        this.motor_control = motor_control;
        //motor_control.F_Ejecutar();
    }
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipalSBC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_Atras;
    private javax.swing.JButton Btn_Reiniciar;
    private javax.swing.JButton Btn_Siguiente;
    private javax.swing.ButtonGroup GBtn_Principal;
    private javax.swing.JLabel Preguntas_Mostrar;
    private javax.swing.JRadioButton R_Btn_A;
    private javax.swing.JRadioButton R_Btn_B;
    private javax.swing.JRadioButton R_Btn_C;
    private javax.swing.JRadioButton R_Btn_D;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
